<?php

namespace blackcube\graphql\controllers;

use blackcube\admin\actions\ModalAction;
use blackcube\admin\actions\ToggleAction;
use blackcube\admin\components\Rbac;
use blackcube\core\interfaces\PluginManagerInterface;
use blackcube\core\interfaces\PluginsHandlerInterface;
use blackcube\core\models\Plugin;
use blackcube\graphql\Plugin as PluginManager;
use blackcube\graphql\models\ConfigureModel;
use blackcube\graphql\Plugin;
use blackcube\admin\Module as AdminModule;
use yii\data\ActiveDataProvider;
use yii\filters\AccessControl;
use yii\filters\AjaxFilter;
use yii\helpers\Json;
use yii\web\Controller;
use Yii;
use yii\web\NotFoundHttpException;

class ConfigureController extends Controller
{

    // public $viewPath = '@blackcube/graphql/views/configure';

    public $layout  = '@blackcube/admin/views/layouts/main';

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->viewPath = '@blackcube/graphql/views/configure';
    }

    /**
     * {@inheritDoc}
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['access'] = [
            'class' => AccessControl::class,
            'rules' => [
                [
                    'allow' => true,
                    'actions' => [
                        'modal-type', 'modal-vat', 'index',
                    ],
                    'roles' => [Rbac::PERMISSION_PLUGIN_VIEW],
                ],
                [
                    'allow' => true,
                    'actions' => [
                        'edit-vat', 'create-vat', 'edit-type', 'create-type',
                    ],
                    'roles' => [Rbac::PERMISSION_PLUGIN_UPDATE],
                ],
                [
                    'allow' => true,
                    'actions' => [
                        'edit-vat', 'toggle-vat', 'edit-type', 'toggle-type',
                    ],
                    'roles' => [Rbac::PERMISSION_PLUGIN_UPDATE],
                ],
                [
                    'allow' => true,
                    'actions' => [
                        'delete-vat', 'delete-type',
                    ],
                    'roles' => [Rbac::PERMISSION_PLUGIN_UPDATE],
                ],
            ]
        ];
        $behaviors['forceAjax'] = [
            'class' => AjaxFilter::class,
            'only' => ['modal-type', 'modal-vat', 'toggle-type', 'toggle-vat'],
        ];
        return $behaviors;
    }

    public function actionIndex(PluginsHandlerInterface $pluginsHandler)
    {
        $pluginManager = $pluginsHandler->getPluginManager(PluginManager::getStaticId());
        $plugin = Plugin::find()->andWhere(['id' => $pluginManager->getId()])->one();
        try {
            $config = Json::decode($plugin->config);
        } catch (\Exception $e) {
            $config = [];
        }

        $configureModel = Yii::createObject(ConfigureModel::class);
        $configureModel->name = $config['name']??PluginManager::getStaticId();

        if (Yii::$app->request->isPost) {
            $configureModel->load(Yii::$app->request->bodyParams);
            if ($configureModel->validate()) {
                $config['name'] = $configureModel->name;
                $plugin->config = Json::encode($config);
                $plugin->save(['config']);
            }
        }
        //PluginManagerInterface::claas
        return $this->render('form', [
            'configureModel' => $configureModel,
            'boId' => '/'.AdminModule::getInstance()->getUniqueId(),
        ]);
    }
}
